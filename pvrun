#!/usr/bin/env python3

import sys

from paravision.utils import parse_cmdline_args, read_files

import importlib
import subprocess


def run_command(module:str, args:list, nproc:int=1):
    if nproc > 1:
        command_pre = [ 'mpiexec', '-np', str(nproc), 'pvbatch' ]
    else:
        command_pre = [ 'pvpython' ]

    command = []
    command.extend([importlib.util.find_spec(module).origin])
    command.extend(args)

    command = command_pre + command

    print(command)
    subprocess.run(command)


def main():

    args = parse_cmdline_args()

    argv_sub = sys.argv[1:]

    # timeKeeper = GetTimeKeeper()
    #
    # timeArray = reader.TimestepValues
    # nts = len(timeArray) or 1
    #
    # args.scalars = args.scalars or reader.PointArrayStatus
    #
    # scalars = args.scalars
    # shellType = args.shelltype

    # ## Specifically integrate to get the chromatogram output
    # ## with either full volume input -> manually extract surfaces and chromatogram
    # ## or surface input, that just needs to be integrated
    # integratedData = []

    if args.chromatogram:
        run_command("paravision.chromatogram", argv_sub, args.nproc)
    elif args.shell_chromatograms:
        run_command("paravision.shell_chromatograms", argv_sub, args.nproc)
    elif args.grm2d:
        run_command("paravision.grm2d", argv_sub, args.nproc)
    elif args.radial_shell_integrate:
        run_command("paravision.radial_shell_integrate", argv_sub, args.nproc)
    elif args.column_snapshot:
        run_command("paravision.column_snapshot", argv_sub, args.nproc)
    elif args.volume_integral:
        run_command("paravision.volume_integral", argv_sub, args.nproc)
    elif args.bead_loading:
        run_command("paravision.bead_loading", argv_sub, args.nproc)
    elif args.mass_flux:
        run_command("paravision.mass_flux", argv_sub, args.nproc)
    elif args.animate:
        run_command("paravision.animate", argv_sub, args.nproc)
    elif args.screenshot:
        run_command("paravision.screenshot", argv_sub, args.nproc)
    elif args.pipeline:
        ## NOTE: Pipeline operations below [EXPERIMENTAL]
        ## The idea is to provide the sequence of operations on the commandline
        ##  and execute it here
        from paravision.project import project
        from paravision.screenshot import screenshot
        supported_operations = {
            'project': project,
            'screenshot': screenshot
        }

        reader = read_files(args['FILES'], filetype=args['filetype'])
        object = reader
        args.pipeline = args.pipeline or []

        for operation in args.pipeline:
            object = supported_operations[operation](object, args)

if __name__ == "__main__":
    main()
